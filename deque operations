#include <iostream>
using namespace std;

class Deque {
    int front, rear, max;
    int deque[10];

public:
    Deque() : front(-1), rear(-1), max(10) {}

    bool isFull() {
        return (front == 0 && rear == max - 1) || (front == rear + 1);
    }

    bool isEmpty() {
        return front == -1;
    }

    void insertFront(int val) {
        if (isFull()) {
            cout << "Queue Overflow\n";
            return;
        }
        if (isEmpty())
            front = rear = 0;
        else if (front == 0)
            front = max - 1;
        else
            front--;
        deque[front] = val;
    }

    void insertRear(int val) {
        if (isFull()) {
            cout << "Queue Overflow\n";
            return;
        }
        if (isEmpty())
            front = rear = 0;
        else if (rear == max - 1)
            rear = 0;
        else
            rear++;
        deque[rear] = val;
    }

    void deleteFront() {
        if (isEmpty()) {
            cout << "Queue Underflow\n";
            return;
        }
        cout << "Deleted: " << deque[front] << endl;
        if (front == rear)
            front = rear = -1;
        else if (front == max - 1)
            front = 0;
        else
            front++;
    }

    void deleteRear() {
        if (isEmpty()) {
            cout << "Queue Underflow\n";
            return;
        }
        cout << "Deleted: " << deque[rear] << endl;
        if (front == rear)
            front = rear = -1;
        else if (rear == 0)
            rear = max - 1;
        else
            rear--;
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty\n";
            return;
        }
        int i = front;
        while (true) {
            cout << deque[i] << " ";
            if (i == rear)
                break;
            i = (i + 1) % max;
        }
        cout << endl;
    }
};

int main() {
    Deque d;
    int choice, val;

    do {
        cout << "1: Insert Front\n2: Insert Rear\n3: Delete Front\n4: Delete Rear\n5: Display\n0: Exit\nChoice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter value: ";
                cin >> val;
                d.insertFront(val);
                break;
            case 2:
                cout << "Enter value: ";
                cin >> val;
                d.insertRear(val);
                break;
            case 3:
                d.deleteFront();
                break;
            case 4:
                d.deleteRear();
                break;
            case 5:
                d.display();
                break;
            case 0:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice\n";
        }
    } while (choice != 0);

    return 0;
}

