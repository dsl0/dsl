class Searching:
    def __init__(self):
        self.__list = []

    def accept_list(self):
        self.__list = [int(input(f"Enter element {i + 1}: ")) for i in range(int(input("Enter number of elements: ")))]

    def linear_search(self, key):
        return next((i for i, val in enumerate(self.__list) if val == key), -1)

    def binary_search(self, key):
        self.__list.sort()
        first, last = 0, len(self.__list) - 1
        while first <= last:
            mid = (first + last) // 2
            if self.__list[mid] == key: return mid
            first, last = (mid + 1, last) if key > self.__list[mid] else (first, mid - 1)
        return -1

    def sentinel_search(self, key):
        last, self.__list[-1] = self.__list[-1], key
        i = 0
        while self.__list[i] != key: i += 1
        self.__list[-1] = last
        return i if i < len(self.__list) - 1 or self.__list[-1] == key else -1

    def fibonacci_search(self, key):
        self.__list.sort()
        fib = [0, 1]
        while fib[-1] < len(self.__list): fib.append(fib[-1] + fib[-2])
        i, offset = -1, -1
        while len(fib) > 2:
            i = min(offset + fib.pop(-2), len(self.__list) - 1)
            if self.__list[i] < key: offset, fib = i, fib
            elif self.__list[i] > key: continue
            else: return i
        return -1

    def print_list(self):
        print(self.__list)

obj = Searching()
obj.accept_list()

while True:
    print("\n1. Linear Search\n2. Binary Search\n3. Sentinel Search\n4. Fibonacci Search\n5. Exit")
    choice = int(input("Enter choice: "))
    if choice == 1:
        key = int(input("Enter key for Linear Search: "))
        pos = obj.linear_search(key)
        print(f"Found at index {pos}" if pos != -1 else "Not found")
    elif choice == 2:
        key = int(input("Enter key for Binary Search: "))
        pos = obj.binary_search(key)
        print(f"Found at index {pos}" if pos != -1 else "Not found")
    elif choice == 3:
        key = int(input("Enter key for Sentinel Search: "))
        pos = obj.sentinel_search(key)
        print(f"Found at index {pos}" if pos != -1 else "Not found")
    elif choice == 4:
        key = int(input("Enter key for Fibonacci Search: "))
        pos = obj.fibonacci_search(key)
        print(f"Found at index {pos}" if pos != -1 else "Not found")
    elif choice == 5:
        break
    else:
        print("Invalid choice, try again.")

